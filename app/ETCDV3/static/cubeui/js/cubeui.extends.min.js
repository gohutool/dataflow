!function(a){

    a.parser.plugins.unshift("browsebox");

    function create(target, options){
        /*a(target).browsebox('options');*/
        options.onClickButton = function(){
            var c = options.dialog||{};
            var closefn = c.onClose;

            c = a.extend(1,{
                modal:true
            }, c, {
                targetid:options.id,
                onClose:function(){
                    var digtarget = this;

                    if(closefn)
                        closefn.call(digtarget);

                    var record = $(digtarget).dialog('options').record;

                    if(record){
                        $(target).browsebox('setRecord', record);

                        if(!$.extends.isEmpty(options.valuefield)){
                            $(target).browsebox('setValue', record[options.valuefield]||'');
                        }
                        if(!$.extends.isEmpty(options.textfield)){
                            $(target).browsebox('setText', record[options.textfield]||'');
                        }
                    }

                    if(options.onFinish){
                        options.onFinish.call(target, digtarget, record);
                    }
                }
            });

            $.app.openDialog(c);
        };

        if(options.hiddenText)
            options.buttonText = null;

        if(options.hiddenIcon)
            options.buttonIcon = null;

        a(target).textbox(options);
    }

    a.fn.browsebox = function(options, param){
        if (typeof options == 'string'){
            var method = a.fn.browsebox.methods[options];
            if (method){
                return method(this, param);
            } else {
                return this.textbox(options, param);
//				return a.fn.combo.methods[options](this, param);
            }
        }

        options = options || {};

        this.each(function(){
            var state = a.data(this, 'browsebox');

            if (state){
                a.extend(state.options, options);
            } else {
                state = a.data(this, 'browsebox', {
                    options:a.fn.browsebox.parseOptions(this, options)
                });
            }

            create(this, state.options);
            /*
            */
        });
    }

    a.fn.iBrowsebox = function(options, param){

        if (typeof options == 'string'){
            var method = a.fn.browsebox.methods[options];
            if (method){
                return method(this, param);
            } else {
                return this.browsebox(options, param);
//				return a.fn.combo.methods[options](this, param);
            }
        }

        this.each(function(){
            a(this).browsebox(options);
        });
    };

    a.fn.browsebox.methods = {
        options: function(jq){
            var copts = jq.textbox('options');
            return $.extend($.data(jq[0], 'browsebox').options, {
                width: copts.width,
                height: copts.height,
                originalValue: copts.originalValue,
                disabled: copts.disabled,
                readonly: copts.readonly
            });
        },
        setRecord:function(jq, record){
            jq.browsebox('options').record = record;
        },
        getRecord:function(jq){
            return jq.browsebox('options').record||{};
        }
    };

    a.fn.browsebox.defaults = a.extend({}, a.fn.textbox.defaults, {
        editable:false,
        hiddenText:false,
        hiddenIcon:false,
        buttonIcon:'fa fa-search',
        valueField:'value',
        textField:'text',
        buttonText:'浏览'
    });

    a.fn.browsebox.parseOptions = function(target, options){
        var c = a.extend({},
            a.fn.browsebox.defaults,
            a.fn.textbox.parseOptions(target),
            a.parser.parseOptions(target), options);
        setId(target, c);
        return c;
    };

    //a.parser.parse(a('[data-toggle="cubeui-combobrowser"]'));

}(jQuery),

    function(a) {

        a.parser.plugins.unshift("echarts");

        a.fn.iDaterangebox = function(options, param){

            if (typeof options == 'string'){
                var method = a.fn.daterangebox.methods[options];
                if (method){
                    return method(this, param);
                } else {
                    return this.daterangebox(options, param);
//				return a.fn.combo.methods[options](this, param);
                }
            }

            this.each(function(){
                a(this).daterangebox(options);
            });
        };

        function initbox(container, options) {
            container = a(container);
            a(container).textbox(options);

            //var cc = $('<span class="textbox combo datebox"><span class="textbox-addon textbox-addon-right" style="right: 0px; top: 1px;"><a href="javascript:" class="textbox-icon combo-arrow" icon-index="0" tabindex="-1" style="width: 18px; height: 22px;"></a></span></span>').appendTo(container);

            var input = a(container).textbox('textbox');
            var span = input.parent('span').addClass('combo').addClass('datebox');
            span.find('>span:first').append('<a href="javascript:" class="textbox-icon combo-arrow" icon-index="1" tabindex="-1" style="width: 26px; height: 28px;"></a>');
            /*var ahref = span.find('>span:first>a.textbox-icon.combo-arrow');
            ahref.off('click');*/

            //input.appendTo(cc);
            var myoptions = options;
            var format = options.locale.format;
            var separator = options.locale.separator;
            input.daterangepicker(myoptions, function(start, end, label){
                $.app.debug(start.format(format) +separator+ end.format(format));
                container.textbox('setValue', start.format(format) +separator+ end.format(format));
            });
            span.find('.textbox-icon.combo-arrow').on('click', function () {
                input.trigger('click.daterangepicker');
            });

            if (options.onChange == undefined) {
                console.log('Can not find function:onChange for', input[0]);
            }
            else {
                input.on('cancel.daterangepicker', function (ev, picker) {
                    $(this).val('');
                    container.val('');
                    options.onChange(ev, picker, '', '');
                });
                input.on('apply.daterangepicker', function (ev, picker) {
                    options.onChange(ev, picker, picker.startDate, picker.endDate);
                });
            }


        };

        a.fn.daterangebox = function(c, d) {
            if ("string" == typeof c) {
                var e = a.fn.daterangebox.methods[c];
                return e ? e(this, d) : this.textbox(c, d)
            }
            return c = c || {},
                this.each(function() {
                    var d = a.data(this, "daterangebox");
                    d ? a.extend(d.options, c) : a.data(this, "daterangebox", {
                        options: a.extend({}, a.fn.daterangebox.defaults, a.fn.daterangebox.parseOptions(this), c)
                    }),

                        d = a.data(this, "daterangebox");

                    initbox(this, d.options);
                })
        },

            a.fn.daterangebox.methods = {

                options: function(b) {
                    var c = b.textbox("options");
                    return a.extend(a.data(b[0], "daterangebox").options, {
                        originalValue: c.originalValue,
                        disabled: c.disabled,
                        readonly: c.readonly
                    })
                },
                destroy: function (target) {
                    $(target).textbox('destroy');
                },
                getValue: function (target) {
                    return $(target).textbox('textbox').val();
                },
                setValue: function (target, value) {
                    $(target).textbox('textbox').val(value);
                    $(target).textbox('setValue', value);

                },
                getStartDate: function (target) {
                    var v = $(target).daterangebox('getValue') ;

                    if(!v){
                        return v;
                    }

                    var options = $(target).daterangebox("options");
                    var separator = options.locale.separator||'-';
                    v = v.split(separator);
                    return v.length>0?v[0]:'';

                },
                getEndDate: function (target) {
                    var v = $(target).daterangebox('getValue') ;

                    if(!v){
                        return v;
                    }

                    var options = $(target).daterangebox("options");
                    var separator = options.locale.separator||'-';
                    v = v.split(separator);
                    return v.length>1?v[1]:'';
                },
                clear: function (target) {
                    $(target).textbox('clear');
                    $(target).textbox('textbox').val('');
                    $(target).val('');
                    //$(target).textbox('textbox').data('daterangepicker').setStartDate(null);
                    //$(target).textbox('textbox').data('daterangepicker').setEndDate(null);
                },
                resize: function (target, width) {
                    $(target)._outerWidth(width)._outerHeight(24);
                    // $(target).daterangepicker('resize', width / 2);
                }
            },

            a.fn.daterangebox.defaults = a.extend({}, a.fn.textbox.defaults, {
                icons:[{
                    iconCls:'fa fa-remove',
                    handler: function(e){
                        $(e.data.target).daterangebox('clear');
                    }
                }],

                onChange:function(ev, picker, startdate, enddate){
                    $.app.debug(picker);
                },
                applyClass: 'btn-sm btn-success',
                cancelClass: 'btn-sm btn-default',
                locale: {
                    separator: '至',
                    format: 'YYYY-MM-DD',
                    applyLabel: '确认',
                    cancelLabel: '清空',
                    fromLabel: '起始时间',
                    toLabel: '结束时间',
                    customRangeLabel: '自定义',
                    weekLabel: "周",
                    firstDay: 1,
                    daysOfWeek: ['日', '一', '二', '三', '四', '五', '六'],
                    monthNames: ['一月', '二月', '三月', '四月', '五月', '六月',
                        '七月', '八月', '九月', '十月', '十一月', '十二月'],
                },
                ranges: {

                    //'最近1小时': [moment().subtract('hours',1), moment()],
                    '今日': [moment(), moment()],
                    '昨日': [moment().subtract(1, 'days').startOf('day'), moment().subtract(1, 'days').endOf('day')],
                    '最近7日': [moment().subtract(6,'days'), moment()],
                    '最近30日': [moment().subtract(29, 'days'), moment()],
                    '本月': [moment().startOf("month"), moment().endOf("month")],
                    '上个月': [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")]
                },
                opens: 'right',    // 日期选择框的弹出位置
                alwaysShowCalendars: true,
                timePicker: false,
                timePicker24Hour: true,
                timePickerSeconds: true,
                showWeekNumbers: true,     // 是否显示第几周

            }),

            a.fn.daterangebox.parseOptions = function(target, options){
                var c = a.extend({},
                    a.fn.daterangebox.defaults,
                    a.fn.textbox.parseOptions(target),
                    a.parser.parseOptions(target), options);
                setId(target, c);
                return c;
            },

        a.parser && a.parser.plugins && a.parser.plugins.push("daterangebox")
    }(jQuery),

    function(a) {
        var default_theme = {
            title : {
                top: 'bottom',
                left:'center',
                textStyle:{
                    fontSize:12
                }
            },
        };


        let doRenderChart = function(b, options, target, e) {
            if (b.onBeforeRender && a.isFunction(b.onBeforeRender)) {
                options = b.onBeforeRender.call(target, e, b, options);
            }

            if (options != null) {
                e.setOption(options, true);
                if (b.onAfterRender && a.isFunction(b.onAfterRender)) {
                    options = b.onAfterRender.call(target, e, b, options);
                }
            }

            $(target).data().charts.option = options;
        };


        a.fn.charts = function(b, c) {
            if ("string" == typeof b) {
                let d = a.fn.charts.methods[b];
                return d ? d(this, c) : this.validatebox(b, c)
            }
            this.each(function() {
                b = a.fn.charts.parseOptions(this, b);
                var prepareOptionfn = b.prepareOption;
                var target = this;

                var c = document.getElementById(b.id)
                    , d = function() {
                    c.style.width = a("#" + b.id).parent().width() - 10 + "px",
                        c.style.height = b.height + "px"
                };
                d();
                var e = echarts.init(c, default_theme);
                $(target).data().charts = {
                    instance : e,
                    options : b
                }

                //e.setOption({});

                if(b.url){

                    a.ajax({
                        url: b.url,
                        type: b.method || "get",
                        dataType: "json",
                        success: function(d, s, c) {

                            let options = undefined;

                            if(prepareOptionfn){
                                options = prepareOptionfn.call(target, e, d);
                                //options = $.extend({}, a, options);
                            }else{
                                options = d
                            }

                            doRenderChart(b, options, target, e);

                            //
                            // if(b.onBeforeRender && a.isFunction(b.onBeforeRender)){
                            // 	options = b.onBeforeRender.call(target, e, b, options);
                            // 	 console.log("remote load before render")
                            // }
                            //
                            // if(options!=null){
                            // 	e.setOption(options, true)
                            // 	console.log("remote load after render")
                            // 	if(b.onAfterRender && a.isFunction(b.onAfterRender)){
                            // 		options = b.onAfterRender.call(target, e, b, options);
                            // 	}
                            // }
                            //
                            // $(target).data().chart_option = options;
                        },
                        error: function(b) {
                            $.app.showerror('获取图表数据失败!');
                            e.hideLoading()
                        }
                    });

                }else{
                    let options = undefined;

                    options = b.option;

                    // if(prepareOptionfn){
                    // 	options = prepareOptionfn.call(target, e, b);
                    // }else{
                    // 	options = b.option;
                    // }

                    doRenderChart(b, options, target, e);
                }

                window.onresize = function() {
                    d(),
                        e.resize()
                }
            })
        }
            ,
            a.fn.charts.methods = {
                options: function (target){
                    return $(target).data().charts.options;
                },
                loadOption : function (target, option){
                    let options = $(target).charts("options")
                    let e = $(target).data().charts.instance;
                    e.setOption(option, true);
                },
                getOption : function (target){
                    let option =  $(target).data().charts.option;
                    return option
                },
                setTitle : function (target, titleOpt){
                    let option =  $(target).data().charts.option;
                    let e =  $(target).data().charts.instance;
                    let options = $(target).charts("options")

                    option.title = titleOpt;
                    doRenderChart(options, option, target, e);

                },
                setSeries : function (target, seriesData){
                    let option =  $(target).data().charts.option;
                    let e =  $(target).data().charts.instance;
                    let options = $(target).charts("options")

                    option.series = seriesData;
                    doRenderChart(options, option, target, e);

                }
            },
            a.fn.charts.parseOptions = function(b, c) {
                let d = a.extend({}, a.fn.charts.defaults, a.parser.parseOptions(b, ["id"]), c);
                return setId(b, d)
            }
            ,
            a.fn.charts.defaults = {
                onBeforeRender: function (chart, options, option){
                    return option
                },
                onAfterRender: function (chart, options, option){
                    return option
                }
            },
        a.parser && a.parser.plugins && a.parser.plugins.push("charts"),

            a.fn.iCharts = function(b, c) {
                if ("string" == typeof b) {
                    let d = a.fn.iCharts.methods[b];
                    return d ? d(this, c) : this.charts(b, c)
                }
                this.each(function() {
                    b = a.fn.iCharts.parseOptions(this, b),
                        a(this).charts(b)
                })
            }
            ,
            a.fn.iCharts.methods = {},
            a.fn.iCharts.parseOptions = function(b, c) {
                let d = a.extend({}, a.fn.charts.parseOptions(b), a.fn.iCharts.defaults, a.parser.parseOptions(b, ["id"]), c);
                return setId(b, d)
            }
            ,
            a.fn.iCharts.defaults = a.extend({}, a.fn.charts.defaults)
    }(jQuery),

    function(a){

        a.fn.iUploadbox = function(b, c) {
            var target = this;

            if ("string" == typeof b) {
                var d = a.fn.iUploadbox.methods[b];
                return d ? d(this, c) : this.textbox(b, c)
            }

            this.each(function() {
                b = a.fn.iUploadbox.parseOptions(this, b),
                0 == a("#" + b.id + "-btn").length && (a(this).closest("form").append('<button type="button" class="layui-btn" id="' + b.id + '-btn" style="display: none;">上传图片</button>'),
                    layui.use("upload", function() {
                        var field = b.field||b.name||'file';

                        var a = layui.jquery
                            , c = layui.upload;
                        c.render({
                            elem: "#" + b.id + "-btn",
                            field:field,
                            url: b.uploadUrl,
                            accept: b.accept,
                            before: function(c) {
                                layer.load();

                                if(b.onBefore){
                                    var d = b.onBefore.call(target, this, c);

                                    if(d){
                                        this.data = this.data||{};
                                        a.extend(this.data, d);
                                    }
                                }
                            },
                            done: function(c, d, e) {
                                checkAjaxJson(c),
                                    c.statusCode == CubeUI.config.statusCode.success ? a("#" + b.id).textbox("setValue", c.filePath) : layer.msg(c.message, {
                                        icon: 5
                                    }),
                                    layer.closeAll("loading");

                                if(b.onDone){
                                    b.onDone.call(target, this, c, d, e);
                                }
                            },
                            error: function() {
                                layer.closeAll("loading")

                                if(b.onError){
                                    b.onError.call(target, this);
                                }
                            }
                        })
                    })),
                    b.onClickButton = function() {
                        a("#" + b.id + "-btn").trigger("click")
                    }
                    ,
                    a(this).textbox(b)
            })
        }
            ,
            a.fn.iUploadbox.methods = {},
            a.fn.iUploadbox.parseOptions = function(b, c) {
                var d = a.extend({}, a.fn.textbox.parseOptions(b), a.fn.iUploadbox.defaults, a.parser.parseOptions(b, ["id", "value", "name"]), c);
                return setId(b, d)
            }
            ,
            a.fn.iUploadbox.defaults = {
                width: "100%",
                buttonText: "选择图片",
                accept: "images",
                buttonIcon: "fa fa-cloud-upload"
            }
    }(jQuery);

$.extend($.fn.datagrid.defaults.editors, {
    browsebox:{
        init: function(container, options){
            var input = $('<input>').appendTo(container);
            input.browsebox(options);
            return input;
        },
        getValue: function(target){
            //return $(target).switchbutton('options').checked ? 'on' : 'off';
            return $(target).browsebox('getValue');
        },
        setValue: function(target, value){
            $(target).browsebox('setValue');
        },
        resize: function(target, width){
            $(target).browsebox('resize', width);
        }
    }
});


$.extend($.fn.datagrid.defaults.editors, {
    switchbutton:{
        init: function(container, options){
            var input = $('<input>').appendTo(container);
            input.switchbutton(options);
            return input;
        },
        getValue: function(target){
            //return $(target).switchbutton('options').checked ? 'on' : 'off';
            return $(target).switchbutton('options').checked ? ($(target).switchbutton('options').on||'on') : ($(target).switchbutton('options').off||'off');
        },
        setValue: function(target, value){
            $(target).switchbutton((value=='on' || ($(target).switchbutton('options').on && value==$(target).switchbutton('options').on))?'check':'uncheck');
        },
        resize: function(target, width){
            $(target).switchbutton('resize', {width: width,height:22});
        }
    },
    label:{
        init: function(container, options){
            var input = $('<span>').appendTo(container);
            return input;
        },
        getValue: function(target){
            //return $(target).switchbutton('options').checked ? 'on' : 'off';
            return $(target).html();
        },
        setValue: function(target, value){
            $(target).html(value);
            return value;
        },
        resize: function(target, width){
        }
    },
    tagbox:{
        init: function(container, options){
            var input = $('<input>').appendTo(container);
            input.tagbox(options);
            return input;
        },
        getValue: function(target){
            //return $(target).switchbutton('options').checked ? 'on' : 'off';
            return $(target).tagbox('getValues').join(',');
        },
        setValue: function(target, value){

            $(target).tagbox('options');
            var t = value;
            value = value || '';
            value = value.split(',')
            var v = $(target).tagbox('setValues', value);
            $(target).tagbox('setText', t);
            return v;
        },
        resize: function(target, width){
            $(target).tagbox('resize', width);
        }
    }
});

$.extend($.fn.textbox.methods, {
    focus:function(a){
        $(a).textbox().next('span').find('input').focus();
    }
});

$.extend($.fn.combobox.methods, {
    fireSelect : function(a){
        var v = $(a).combobox('getValue');
        $(a).combobox('setValue','');
        $(a).combobox('setValue', v);
    },
    getRecord: function(a){
        var v = $(a).combobox('getValue');

        if(v){
            v = $.fn.combobox.methods.valueIndex(a, v);
            if(v>=0){
                var vs = $(a).combobox('getData');
                return vs[v];
            }
        }

        return ;
    },
    valueIndex : function(a, v){
        var v = v||'';
        var vs = $(a).combobox('getData');
        var f = $(a).combobox('options').valueField;
        var idx = -1;

        if(vs && vs.length>0){
            $.each(vs, function(i, data){
                if(v && v == vs[i][f]){
                    idx=i;
                    return false;
                }

            });
        }

        return idx;
    },

    textIndex : function(a, v){
        var v = v||'';
        var vs = $(a).combobox('getData');
        var f = $(a).combobox('options').textField;
        var idx = -1;

        if(vs && vs.length>0){
            $.each(vs, function(i, data){
                if(v && v == vs[i][f])
                    return idx=i, false;
            });
        }

        return idx;
    }
});

$.extend($.fn.textbox.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).textbox('getText');

            $(e.data.target).textbox('clear');

            let onClearFn = $(e.data.target).textbox('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)){
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.spinner.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).spinner('getValue');
            $(e.data.target).spinner('clear');


            let onClearFn = $(e.data.target).spinner('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)){
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.numberspinner.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).numberspinner('getValue');
            $(e.data.target).numberspinner('clear');


            let onClearFn = $(e.data.target).numberspinner('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)){
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.datebox.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).datebox('getValue');
            $(e.data.target).datebox('clear');

            let onClearFn = $(e.data.target).datebox('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)){
                onClearFn.call($(e.data.target), text);
            }

        }
    }]
});

$.extend($.fn.datetimespinner.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).datetimespinner('getValue');
            $(e.data.target).datetimespinner('clear');

            let onClearFn = $(e.data.target).datetimespinner('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)){
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.datetimebox.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).datetimebox('getValue');
            $(e.data.target).datetimebox('clear');

            let onClearFn = $(e.data.target).datetimebox('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)){
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.filebox.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).filebox('getValue');
            $(e.data.target).filebox('clear');

            let onClearFn = $(e.data.target).filebox('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)){
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.timespinner.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).timespinner('getValue');
            $(e.data.target).timespinner('clear');

            let onClearFn = $(e.data.target).timespinner('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)){
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.numberbox.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).numberbox('getValue');
            $(e.data.target).numberbox('clear');

            let onClearFn = $(e.data.target).numberbox('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)) {
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.combo.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).combo('getValue');
            $(e.data.target).combo('clear');

            let onClearFn = $(e.data.target).combo('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)) {
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.combobox.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).combobox('getValue');
            $(e.data.target).combobox('clear');

            let onClearFn = $(e.data.target).combobox('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)) {
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.combogrid.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){

            let text = $(e.data.target).combogrid('getValue');
            $(e.data.target).combogrid('clear');

            var opt = $(e.data.target).combogrid("options");

            if(opt && opt.onClear){
                opt.onClear.call($(e.data.target));
            }

            let onClearFn = $(e.data.target).combogrid('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)) {
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.combotree.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).combotree('getValue');
            $(e.data.target).combotree('clear');

            let onClearFn = $(e.data.target).combotree('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)) {
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

$.extend($.fn.tagbox.defaults, {
    icons:[{
        iconCls:'fa fa-remove',
        handler: function(e){
            let text = $(e.data.target).tagbox('getValue');
            $(e.data.target).tagbox('clear');

            let onClearFn = $(e.data.target).tagbox('options').onClear;
            if(onClearFn&&$.isFunction(onClearFn)) {
                onClearFn.call($(e.data.target), text);
            }
        }
    }]
});

/**
 *
 *
 * @requires jQuery,EasyUI
 *
 * 扩展datagrid，添加动态增加或删除Editor的方法
 *
 * 例子如下，第二个参数可以是数组
 *
 * datagrid.datagrid('removeEditor', 'cpwd');
 *
 * datagrid.datagrid('addEditor', [ { field : 'ccreatedatetime', editor : { type : 'datetimebox', options : { editable : false } } }, { field : 'cmodifydatetime', editor : { type : 'datetimebox', options : { editable : false } } } ]);
 *
 */
$.extend($.fn.datagrid.methods, {
    addEditor : function(jq, param) {
        if (param instanceof Array) {
            $.each(param, function(index, item) {
                var e = $(jq).datagrid('getColumnOption', item.field);
                e.editor = item.editor;
            });
        } else {
            var e = $(jq).datagrid('getColumnOption', param.field);
            e.editor = param.editor;
        }
    },
    removeEditor : function(jq, param) {
        if (param instanceof Array) {
            $.each(param, function(index, item) {
                var e = $(jq).datagrid('getColumnOption', item);
                e.editor = {};
            });
        } else {
            var e = $(jq).datagrid('getColumnOption', param);
            e.editor = {};
        }
    }
});


$.extend($.fn.progressbar.methods,{
    startLoading:function (jq, interval) {

        jq.each(function () {
            var one = $(this);
            let options = one.progressbar("options")
            interval = interval || 500;

            if(options.___timer){
                $.easyui.thread.stopLoop(options.___timer);
                options.___timer = null;
            }

            options.___timer = setInterval(function() {
                let a = one.progressbar("getValue");
                a += 10;
                if(a > 100)
                    a = 0;
                one.progressbar("setValue", a);

            }, interval)
        });
    },
    stopLoading:function (jq) {

        jq.each(function () {
            var one = $(this);
            let options = one.progressbar("options");

            if(options.___timer){
                $.easyui.thread.stopLoop(options.___timer);
                options.___timer = null;
            }
        })
    }
});


/**
 * 动态改变编辑器
 * 用法：
 * 改变编辑器 dg.datagrid("changeEditor",{index:0,field :'name',editor:'textbox'})
 * dg.datagrid("changeEditor",{index:0,field :'name',editor:{type:'textbox',options:{width:100}}})
 * 获取编辑值：dg.datagrid("getEditorValue",0)
 * 设置编辑值:dg.datagrid("setEditorValue",{index:0,vlaue:{name:'123',id:780}})
 *
 */
$.extend($.fn.datagrid.methods,
    {
        currentRowIndex: function (jq, obj) {
            return $(obj).closest("tr.datagrid-row")[0].rowIndex;
        },
        changeEditor: function (jq, p) {
            return jq.each(function () {
                var dg = $(this);

                var index = p.index;
                if (typeof (index) != "number") {
                    index = $(index).closest("tr.datagrid-row")[0].rowIndex;
                }

                var editor = dg.datagrid('getEditor', { index: index, field: p.field });
                var diveitor = $(editor.target).closest("div.datagrid-cell");
                var editortd = $(editor.target).parent();
                var opts = dg.datagrid("options");
                var _15d, _15e;
                if (typeof p.editor == "string") {
                    _15d = p.editor;
                } else {
                    _15d = p.editor.type;
                    _15e = p.editor.options;
                }
                editortd.empty();
                var _15f = opts.editors[_15d];
                $.data(diveitor[0], "datagrid.editor", { actions: _15f, target: _15f.init(editortd, _15e), field: p.field, type: _15d, oldHtml: editor.oldHtml });
                var row = opts.finder.getRow(dg[0], index);
                var ed = $.data(diveitor[0], "datagrid.editor");
                ed.actions.setValue(ed.target, row[p.field]);
                ed.actions.resize(ed.target, diveitor.width());
            });
        },
        getEditorValue: function (jq, p) {

            var dg = jq;

            var index = p;
            if (typeof (index) != "number") {
                index = $(index).closest("tr.datagrid-row")[0].rowIndex;
            }
            var opts = dg.datagrid("options");
            var tr = opts.finder.getTr(dg[0], index);
            var row = opts.finder.getRow(dg[0], index);



            var _14d = $.extend({}, row);
            tr.find("div.datagrid-editable").each(function () {
                var _14e = $(this).parent().attr("field");
                var ed = $.data(this, "datagrid.editor");
                var t = $(ed.target);
                var _14f = t.data("textbox") ? t.textbox("textbox") : t;
                _14f.triggerHandler("blur");
                var _150 = ed.actions.getValue(ed.target);
                _14d[_14e] = _150;
            });

            return _14d;
        },
        setEditorValue: function (jq, p) {
            return jq.each(function () {
                var dg = $(this);

                var index = p.index;
                if (typeof (index) != "number") {
                    index = $(index).closest("tr.datagrid-row")[0].rowIndex;
                }
                var opts = dg.datagrid("options");
                var tr = opts.finder.getTr(dg[0], index);
                var row = opts.finder.getRow(dg[0], index);
                var value = p.value || {};


                var _14d = $.extend({}, row);
                tr.find("div.datagrid-editable").each(function () {
                    var _14e = $(this).parent().attr("field");
                    if (value[_14e] !== undefined) {
                        var ed = $.data(this, "datagrid.editor");
                        var t = $(ed.target);
                        ed.actions.setValue(ed.target, value[_14e]);
                    }
                });

            });
        }
    });